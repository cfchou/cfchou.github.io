<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: generics | Been there, done that]]></title>
  <link href="http://cfchou.github.io/blog/categories/generics/atom.xml" rel="self"/>
  <link href="http://cfchou.github.io/"/>
  <updated>2015-04-25T11:02:46+08:00</updated>
  <id>http://cfchou.github.io/</id>
  <author>
    <name><![CDATA[cfchou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pattern Matching for Type Erasure]]></title>
    <link href="http://cfchou.github.io/blog/2015/02/24/pattern-matching-for-type-erasure/"/>
    <updated>2015-02-24T12:55:39+08:00</updated>
    <id>http://cfchou.github.io/blog/2015/02/24/pattern-matching-for-type-erasure</id>
    <content type="html"><![CDATA[<h3>Producer as an Actor</h3>

<p>In one of my toy projects, I use an <strong>Akka</strong> <code>Actor</code> to encapsulate a <strong>Kafka</strong> <code>Producer</code>. The benefit is twofold. First, it&rsquo;s recommanded that <a href="http://kafka.apache.org/082/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html">a producer should be shared among all threads for best performance</a>. Maintaining a seemingly long-lived actor/producer can be easily achieved thanks to <strong>Akka</strong>&rsquo;s <code>SupervisorStrategy</code>. Second, resources can be well managed by the hooks inserted in the life-cycle of the actor. However, indirectly asking producer to send messages of a parameterized type would sacrifice type safety due to <strong>type erasure</strong> as described bellow.</p>

<!-- more -->


<h3>Problems caused by Type Erasure</h3>

<p><strong>Type erasure</strong> removes some type information of parameterized types. It is used to fill the gap between java generics and the legacy code written prior generics. Scala, while is subject to the fact that it is implemented in java, introduces a few mechanisms to get around type erasure.</p>

<p>To see one of the limitations caused by <strong>type erasure</strong>, let&rsquo;s look at this piece of code:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">KeyedMesssage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Unknown</span> <span class="n">is</span> <span class="n">discarded</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">TestApp</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">actor</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]</span>
</span><span class='line'>  <span class="n">actor</span> <span class="o">!</span> <span class="k">new</span> <span class="nc">KeyedMessage</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;1,&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;legal&quot;</span><span class="o">&gt;</span><span class="nc">Int</span><span class="o">,</span> <span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">actor</span> <span class="o">!</span> <span class="k">new</span> <span class="nc">KeyedMessage</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;illegal&amp;quot;, &amp;quot;but compiled!&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">The</span> <span class="n">compiler</span> <span class="n">don</span><span class="-Symbol">&#39;t</span> <span class="n">complain</span> <span class="n">about</span> <span class="n">the</span> <span class="n">illegal</span> <span class="n">message</span><span class="o">,</span> <span class="n">since</span> <span class="o">**</span><span class="nc">Actor</span><span class="o">**</span><span class="-Symbol">&#39;s</span> <span class="n">bang</span> <span class="n">`!`</span> <span class="n">function</span> <span class="n">accepts</span> <span class="n">the</span> <span class="k">type</span> <span class="kt">of</span> <span class="kt">`Any`.</span> <span class="kt">But</span> <span class="kt">can</span> <span class="kt">we</span> <span class="kt">rely</span> <span class="kt">on</span> <span class="kt">pattern</span> <span class="kt">matching</span> <span class="kt">in</span> <span class="kt">`receive`</span> <span class="kt">to</span> <span class="kt">spot</span> <span class="kt">misuse</span> <span class="kt">and</span> <span class="kt">safely</span> <span class="kt">discard</span> <span class="kt">them</span> <span class="kt">during</span> <span class="kt">run-time?</span> <span class="kt">Unfortunately</span><span class="o">,</span> <span class="n">we</span> <span class="n">can</span><span class="-Symbol">&#39;t</span><span class="o">,</span> <span class="n">at</span> <span class="n">least</span> <span class="n">not</span> <span class="n">in</span> <span class="k">this</span> <span class="n">way</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nc">At</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">the</span> <span class="n">day</span><span class="o">,</span> <span class="nc">JVM</span> <span class="n">only</span> <span class="n">knows</span> <span class="n">`ProducerActor[_, _]`</span> <span class="n">`KeyedMessage[_, _]`</span> <span class="n">at</span> <span class="n">run</span><span class="o">-</span><span class="n">time</span><span class="o">.</span> <span class="nc">Type</span> <span class="n">information</span> <span class="n">of</span> <span class="n">the</span> <span class="k">type</span> <span class="kt">parameters</span> <span class="kt">are</span> <span class="kt">not</span> <span class="kt">carried</span> <span class="kt">over</span> <span class="kt">from</span> <span class="kt">compile-time.</span> <span class="kt">Matching</span> <span class="kt">whatever</span> <span class="kt">instantiation</span> <span class="kt">of</span> <span class="kt">`KeyedMessage[X, Y]`</span> <span class="kt">to</span> <span class="kt">`KeyedMessage[_, _]`</span> <span class="kt">is</span> <span class="kt">unduly</span> <span class="kt">legal</span><span class="o">(</span><span class="kt">though</span> <span class="kt">an</span> <span class="kt">unchecked</span> <span class="kt">warning</span> <span class="kt">should</span> <span class="kt">be</span> <span class="kt">issued</span><span class="o">,</span> <span class="kt">more</span> <span class="kt">on</span> <span class="kt">that</span> <span class="kt">later</span><span class="o">).</span> <span class="nc">In</span> <span class="n">`TestApp`</span><span class="o">,</span> <span class="n">the</span> <span class="n">illegal</span> <span class="n">`KeyedMessage[String, String]`</span> <span class="n">will</span> <span class="k">match</span> <span class="n">the</span> <span class="n">first</span> <span class="n">clause</span><span class="o">.</span> <span class="n">A</span> <span class="n">run</span><span class="o">-</span><span class="n">time</span> <span class="n">exception</span> <span class="n">will</span> <span class="n">be</span> <span class="n">thrown</span> <span class="n">because</span> <span class="n">`producer.send`</span> <span class="n">is</span> <span class="n">expecting</span> <span class="n">`KeyedMessage[Int, String]`</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">##</span><span class="k">#</span><span class="nc">Reification</span> <span class="n">using</span> <span class="nc">TypeTag</span><span class="o">[</span><span class="kt">T</span><span class="o">]##</span><span class="k">#</span>
</span><span class='line'>
</span><span class='line'><span class="nc">The</span> <span class="n">solution</span><span class="o">,</span> <span class="n">as</span> <span class="o">[</span><span class="kt">suggested</span> <span class="kt">by</span> <span class="kt">Roland</span> <span class="kt">Kuhn</span><span class="o">](</span><span class="n">https</span><span class="o">://</span><span class="n">groups</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">forum</span><span class="o">/#!</span><span class="n">topic</span><span class="o">/</span><span class="n">akka</span><span class="o">-</span><span class="n">user</span><span class="o">/</span><span class="mi">7</span><span class="n">gd2Tfwax5Q</span><span class="o">),</span> <span class="n">is</span> <span class="n">to</span> <span class="n">use</span> <span class="n">`TypeTag[T]`</span><span class="o">.</span> <span class="nc">Basically</span><span class="o">,</span> <span class="n">to</span> <span class="n">make</span> <span class="nc">JVM</span> <span class="n">aware</span> <span class="n">of</span> <span class="n">what</span> <span class="n">`K, V`</span> <span class="n">really</span> <span class="n">are</span><span class="o">,</span> <span class="n">a</span> <span class="n">technique</span> <span class="n">called</span> <span class="o">**</span><span class="k">type</span> <span class="kt">reification**</span> <span class="kt">is</span> <span class="kt">needed.</span> <span class="kt">It</span><span class="err">&#39;</span><span class="kt">s</span> <span class="kt">a</span> <span class="kt">behaviour</span> <span class="kt">that</span> <span class="kt">enough</span> <span class="kt">information</span> <span class="kt">is</span> <span class="kt">retained</span> <span class="kt">so</span> <span class="kt">that</span> <span class="kt">JVM</span> <span class="kt">knows</span> <span class="kt">what</span> <span class="k">type</span> <span class="kt">parameters</span> <span class="kt">are</span> <span class="kt">during</span> <span class="kt">run-time.</span> <span class="kt">Scala</span><span class="err">&#39;</span><span class="kt">s</span> <span class="kt">`TypeTag[T]`</span> <span class="kt">provides</span> <span class="kt">such</span> <span class="kt">functionality:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;implicit%20tk:%20TypeTag[K],%20tv:%20TypeTag[V]&quot;</span><span class="o">&gt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Msg</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">tk</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">tk</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">m</span><span class="o">.</span><span class="n">tv</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">tv</span><span class="o">.</span><span class="n">tpe</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Unknown</span> <span class="n">is</span> <span class="n">discarded</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Msg</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;override%20val%20key:%20K,%20override%20val%20value:%20V&quot;</span><span class="o">&gt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">(</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">tk</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">K</span><span class="o">],</span> <span class="k">val</span> <span class="n">tv</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">V</span><span class="o">])</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">KeyedMessage</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key,%20value&quot;</span><span class="o">&gt;</span><span class="n">K</span><span class="o">,</span> <span class="n">V</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">`</span><span class="n">`</span>
</span><span class='line'><span class="n">&lt;/code&gt;TypeTag[T]::tpe&lt;code&gt;is reflective representation of type T. An instance of&lt;/code&gt;A &amp;lt;:&amp;lt; B`</span> <span class="n">witnesses</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">A</span> <span class="n">is</span> <span class="n">a</span> <span class="n">subtype</span> <span class="n">of</span> <span class="n">B</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nc">Context</span> <span class="n">bound</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">reduce</span> <span class="n">a</span> <span class="n">little</span> <span class="n">bit</span> <span class="n">of</span> <span class="n">clumsiness</span> <span class="n">of</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">ProducerActor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">interface</span><span class="k">:</span>
</span><span class='line'><span class="kt">&lt;code&gt;scala</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K:TypeTag</span>, <span class="kt">V:TypeTag</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Msg</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">tk</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">TypeTag</span><span class="o">[</span><span class="kt">K</span><span class="o">]].</span><span class="n">tpe</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">m</span><span class="o">.</span><span class="n">tv</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">TypeTag</span><span class="o">[</span><span class="kt">V</span><span class="o">]].</span><span class="n">tpe</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="nc">Props</span> <span class="nc">Factory</span> <span class="nc">Pattern</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">If</span> <span class="n">we</span> <span class="k">try</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">ProducerActor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">in</span> <span class="k">this</span> <span class="n">way</span><span class="k">:</span>
</span><span class='line'><span class="kt">&lt;code&gt;scala</span>
</span><span class='line'><span class="k">val</span> <span class="n">actor</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">ProducerActor</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]]))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">We</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">ll</span> <span class="n">get</span> <span class="n">during</span> <span class="n">run</span><span class="o">-</span><span class="n">time</span> <span class="n">an</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nc">IllegalArgumentException</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">IllegalArgumentException</span><span class="k">:</span> <span class="kt">no</span> <span class="kt">matching</span> <span class="kt">constructor</span> <span class="kt">found</span> <span class="kt">on</span> <span class="kt">class</span> <span class="kt">ProducerActor</span> <span class="kt">for</span> <span class="kt">arguments</span> <span class="o">[]&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">The</span> <span class="n">reason</span> <span class="n">causing</span> <span class="k">this</span> <span class="n">problem</span> <span class="n">is</span> <span class="n">subtle</span><span class="o">.</span> <span class="n">I</span> <span class="n">guess</span> <span class="n">that</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">because</span> <span class="n">the</span> <span class="n">needed</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">implicits</span> <span class="nc">TypeTag</span><span class="o">[</span><span class="kt">K</span><span class="o">]</span> <span class="n">and</span> <span class="nc">TypeTag</span><span class="o">[</span><span class="kt">V</span><span class="o">]&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">are</span> <span class="n">not</span> <span class="n">there</span> <span class="n">by</span> <span class="n">the</span> <span class="n">time</span> <span class="n">the</span> <span class="nc">Props</span> <span class="n">is</span> <span class="n">used</span> <span class="k">for</span> <span class="n">creating</span> <span class="n">actors</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">We</span> <span class="n">can</span> <span class="n">define</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://doc.akka.io/docs/akka/2.3.9/scala/actors.html#Recommended_Practices&quot;</span><span class="o">&gt;</span><span class="nc">Props</span> <span class="n">factory</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">to</span> <span class="n">avoid</span> <span class="k">this</span> <span class="n">problem</span><span class="o">(</span><span class="n">the</span> <span class="n">major</span> <span class="n">benefit</span> <span class="n">of</span> <span class="n">using</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nc">Props</span> <span class="n">factory</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">described</span> <span class="n">in</span> <span class="n">the</span> <span class="n">document</span> <span class="n">and</span> <span class="n">is</span> <span class="n">beyond</span> <span class="n">the</span> <span class="n">scope</span> <span class="n">of</span> <span class="k">this</span> <span class="n">post</span><span class="o">)</span><span class="k">:</span>
</span><span class='line'><span class="kt">&lt;code&gt;scala</span>
</span><span class='line'><span class="k">object</span> <span class="nc">ProducerActor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">props</span><span class="o">[</span><span class="kt">K:TypeTag</span>, <span class="kt">V:TypeTag</span><span class="o">]</span><span class="k">:</span> <span class="kt">Props</span> <span class="o">=</span> <span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">val</span> <span class="n">actor</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">ProducerActor</span><span class="o">.</span><span class="n">props</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">])</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">By</span> <span class="n">doing</span> <span class="n">so</span><span class="o">,</span> <span class="n">we</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">re</span> <span class="n">assured</span> <span class="n">that</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">would</span> <span class="n">generate</span> <span class="n">the</span> <span class="n">needed</span> <span class="n">implicits</span> <span class="k">for</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Props</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">object</span> <span class="nc">right</span> <span class="n">at</span> <span class="n">the</span> <span class="n">line</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">actorOf</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="nc">Reify</span> <span class="nc">List</span><span class="o">[</span><span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]]&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Notice</span> <span class="n">that</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nc">Kafka</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Producer</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">send</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">actually</span> <span class="n">accepts</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">vararg</span><span class="o">&lt;/</span><span class="n">strong</span><span class="k">&gt;:</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">scala</span>
</span><span class='line'><span class="k">def</span> <span class="n">send</span><span class="o">(</span><span class="n">messages</span><span class="k">:</span> <span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]*)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">Sending</span> <span class="n">one</span> <span class="n">message</span> <span class="n">is</span> <span class="n">just</span> <span class="n">sending</span> <span class="n">a</span> <span class="n">one</span><span class="o">-</span><span class="n">element</span> <span class="n">list</span> <span class="n">of</span> <span class="n">messages</span><span class="o">.</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">receive</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">therefore</span> <span class="n">only</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">handle</span> <span class="n">the</span> <span class="n">generalized</span> <span class="k">case:</span>
</span><span class='line'><span class="kt">&lt;code&gt;scala</span>
</span><span class='line'><span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">ms</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">KeyedMesssage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]]</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">ms</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nc">Likewise</span><span class="o">,</span> <span class="nc">JVM</span> <span class="n">wouldn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">know</span> <span class="n">anything</span> <span class="n">about</span> <span class="n">the</span> <span class="k">type</span> <span class="kt">parameters</span> <span class="kt">due</span> <span class="kt">to</span> <span class="kt">&lt;strong&gt;</span><span class="k">type</span> <span class="kt">erasure&lt;/strong&gt;.</span> <span class="kt">The</span> <span class="kt">pattern</span> <span class="kt">is</span> <span class="kt">&lt;code&gt;List</span><span class="o">[</span><span class="k">_</span><span class="o">]&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">at</span> <span class="n">run</span><span class="o">-</span><span class="n">time</span><span class="o">.</span> <span class="nc">Consequently</span><span class="o">,</span> <span class="n">any</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">List</span><span class="o">[</span><span class="kt">T</span><span class="o">]&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">would</span> <span class="k">match</span><span class="o">.</span> <span class="nc">Unsurprisingly</span><span class="o">,</span> <span class="n">we</span> <span class="n">can</span> <span class="n">enforce</span> <span class="k">type</span> <span class="kt">safety</span> <span class="kt">by</span> <span class="kt">&lt;code&gt;TypeTag</span><span class="o">[</span><span class="kt">T</span><span class="o">]&lt;/</span><span class="n">code</span><span class="o">&gt;.</span> <span class="nc">Before</span> <span class="n">we</span> <span class="n">proceed</span><span class="o">,</span> <span class="n">there</span> <span class="n">are</span> <span class="n">a</span> <span class="n">few</span> <span class="n">points</span> <span class="n">worth</span> <span class="n">noting</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">This</span> <span class="n">piece</span> <span class="n">of</span> <span class="n">code</span> <span class="n">would</span> <span class="n">compile</span> <span class="k">with</span> <span class="n">a</span> <span class="n">warning</span> <span class="n">saying</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">non</span><span class="o">-</span><span class="n">variable</span> <span class="k">type</span> <span class="kt">argument</span> <span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span> <span class="n">in</span> <span class="k">type</span> <span class="kt">pattern</span> <span class="kt">List</span><span class="o">[</span><span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]]</span> <span class="n">is</span> <span class="n">unchecked</span> <span class="n">since</span> <span class="n">it</span> <span class="n">is</span> <span class="n">eliminated</span> <span class="n">by</span> <span class="n">erasure</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&lt;/</span><span class="n">strong</span><span class="o">&gt;.</span> <span class="nc">Such</span> <span class="n">warning</span> <span class="n">rises</span> <span class="n">because</span> <span class="n">according</span> <span class="n">to</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ001&quot;</span><span class="o">&gt;</span><span class="nc">Java</span> <span class="nc">Generics</span> <span class="nc">FAQ</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">unchecked</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">warnings</span> <span class="n">are</span> <span class="n">reported</span> <span class="n">when</span> <span class="n">the</span> <span class="n">compiler</span> <span class="n">finds</span> <span class="n">a</span> <span class="n">cast</span> <span class="n">whose</span> <span class="n">target</span> <span class="k">type</span> <span class="kt">is</span> <span class="kt">either</span> <span class="kt">a</span> <span class="kt">parameterized</span> <span class="k">type</span> <span class="kt">or</span> <span class="kt">a</span> <span class="k">type</span> <span class="kt">parameter.&lt;/strong&gt;</span> <span class="kt">However</span><span class="o">,</span> <span class="n">why</span> <span class="n">didn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">we</span> <span class="n">see</span> <span class="n">any</span> <span class="n">warning</span> <span class="n">previously</span> <span class="n">when</span> <span class="n">we</span> <span class="n">delt</span> <span class="k">with</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]&lt;/</span><span class="n">code</span><span class="o">&gt;?</span> <span class="nc">Well</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">probably</span> <span class="n">a</span> <span class="n">bug</span> <span class="n">and</span> <span class="n">is</span> <span class="n">addressed</span> <span class="n">by</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://issues.scala-lang.org/browse/SI-9188&quot;</span><span class="o">&gt;</span><span class="nc">SI</span><span class="o">-</span><span class="mi">9188</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;.&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">We</span> <span class="n">wouldn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">discuss</span> <span class="n">it</span> <span class="n">at</span> <span class="n">length</span> <span class="n">but</span> <span class="n">actually</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://docs.scala-lang.org/overviews/reflection/typetags-manifests.html&quot;</span><span class="o">&gt;</span><span class="n">there</span> <span class="n">are</span> <span class="n">different</span> <span class="n">types</span> <span class="n">of</span> <span class="nc">TypeTag</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;.</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">TypeTag</span><span class="o">[</span><span class="kt">T</span><span class="o">]&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">is</span> <span class="n">deliberately</span> <span class="n">chosen</span> <span class="n">since</span> <span class="n">it</span> <span class="n">is</span> <span class="n">the</span> <span class="n">strongest</span> <span class="n">in</span> <span class="n">the</span> <span class="n">sense</span> <span class="n">that</span> <span class="n">it</span> <span class="n">would</span> <span class="n">retained</span> <span class="k">type</span> <span class="kt">information</span> <span class="kt">for</span> <span class="kt">all</span> <span class="kt">nested</span> <span class="k">type</span> <span class="kt">parameters.&lt;/p&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">By</span> <span class="n">and</span> <span class="n">large</span><span class="o">,</span> <span class="n">the</span> <span class="n">solution</span> <span class="n">is</span><span class="k">:</span>
</span></code></pre></td></tr></table></div></figure>scala
case class ListMsg<a href="ms:%20List[U],%20tag:%20TypeTag[U]">U</a></p>

<p>class ProducerActor[K:TypeTag, V:TypeTag] extends Actor {
  val producer = new Producer[K, V]
  def receive: Receive = {
    case ListMsg(ms, tag) if tag.tpe &lt;:&lt; typeOf[KeyedMessage[K, V]] =>
      val tmp = ms.asInstanceOf[List[KeyedMessage[K, V]]]
      producer.send(tmp: <em>*)
    case _ => log.debug(&ldquo;Unknown is discarded&rdquo;)
  }
}
<code>``
Note that we have to cast to</code>List[KeyedMessage[K, V]]<code>to pass the static type check depite the fact that during run-time, JVM actually sees</code>ms.asInstanceOf[List[</em>]]`. Nevertheless, by filtering out unwanted types in the case clause, the cast would always happily succeed.</p>

<p>That&rsquo;s pretty much it. We have seen how <strong>type erasure</strong> steps in the way when pattern matching generic types. A solution of using <code>TypeTag[T]</code> is demonstrated. This technique of course can be used elsewhere to improve type safety.</p>

<p>-</p>
]]></content>
  </entry>
  
</feed>
