<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Been there, done that]]></title>
  <link href="http://cfchou.github.io/atom.xml" rel="self"/>
  <link href="http://cfchou.github.io/"/>
  <updated>2015-04-26T00:35:46+08:00</updated>
  <id>http://cfchou.github.io/</id>
  <author>
    <name><![CDATA[cfchou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Closer Look at Kafka OffsetRequest]]></title>
    <link href="http://cfchou.github.io/blog/2015/04/23/a-closer-look-at-kafka-offsetrequest/"/>
    <updated>2015-04-23T12:04:59+08:00</updated>
    <id>http://cfchou.github.io/blog/2015/04/23/a-closer-look-at-kafka-offsetrequest</id>
    <content type="html"><![CDATA[<h3>TL;NR</h3>

<p>When using Kafka&rsquo;s simple consumer API to query offsets of messages in a given partition, the result we get are either the offsets to the first messages in log segments or the offset to the latest message of the whole partition.</p>

<!-- more -->


<h3>High Level and Simple Consumer API</h3>

<p>While Kafka&rsquo;s producer API is fairly straightforward, the consmer API is another story. There are two flavours of consumer API: <strong>high level</strong> and <strong>simple</strong>. The former, as its name suggests, provides a high level abstraction(<strong>Consumer Group</strong>) and just does the job(consuming messages). The latter, despite its name, is not simple at all and requires significant efforts to make it behave correctly. Lately, I have a chance to play with the simple API and feel there&rsquo;s something worth notice.</p>

<p>The general advise is to use the <strong>high level API</strong> whenever possible. A typical scenario is that consumers just want to keep reading messages sent to the topic in question. High level API on behalf of us handles the nitty-gritty of communication to brokers and leaders, plus, the offsets(the points to which we have conumed messages) are also managed for us.</p>

<p>Despite its convenience, there are many cases where the high level API doesn&rsquo;t cut. For example, re-reading messages from a particular time/offset. That&rsquo;s where the <strong>simple API</strong> to chime in.</p>

<p>Kafka develoers have kindly provided sample code for both kinds of API on the project wiki<a href="https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example">1</a><a href="https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example">2</a>. The samples are explained in detail. With very little, if at all, modification, we can see them run with the newest release(0.8.2.1) of Kafka.</p>

<p>However, in the sample code for simple consumer API, the section that queries message offsets deserves a further explanation.</p>

<h3>OffsetRequest</h3>

<p>To start, we prepare OffsetRequest(the API allows us to query multiple partitions across different topics at once. For expediency&rsquo;s sake we stick to only one partition):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// The partition of topic that we will query for</span>
</span><span class='line'><span class="n">TopicAndPartition</span> <span class="n">topicAndPartition</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">TopicAndPartition</span><span class="o">(</span><span class="n">topic</span><span class="o">,</span> <span class="n">partition</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">TopicAndPartition</span><span class="o">,</span> <span class="n">PartitionOffsetRequestInfo</span><span class="o">&gt;</span> <span class="n">requestInfo</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">TopicAndPartition</span><span class="o">,</span> <span class="n">PartitionOffsetRequestInfo</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// whichTime??? 1???</span>
</span><span class='line'><span class="n">requestInfo</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">topicAndPartition</span><span class="o">,</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">PartitionOffsetRequestInfo</span><span class="o">(</span><span class="n">whichTime</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">kafka</span><span class="o">.</span><span class="na">javaapi</span><span class="o">.</span><span class="na">OffsetRequest</span> <span class="n">request</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">kafka</span><span class="o">.</span><span class="na">javaapi</span><span class="o">.</span><span class="na">OffsetRequest</span><span class="o">(</span><span class="n">requestInfo</span><span class="o">,</span>
</span><span class='line'>    <span class="n">kafka</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">OffsetRequest</span><span class="o">.</span><span class="na">CurrentVersion</span><span class="o">(),</span><span class="n">clientName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">OffsetResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="na">getOffsetsBefore</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following scala code pretty much does the same thing. I&rsquo;ll continue with scala code as Kafka internally is written in scala.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// The partition of topic that we will query for</span>
</span><span class='line'><span class="k">val</span> <span class="n">part</span> <span class="k">=</span> <span class="nc">TopicAndPartition</span><span class="o">(</span><span class="n">topic</span><span class="o">,</span> <span class="n">partitionId</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// whichTime??? 1???</span>
</span><span class='line'><span class="k">val</span> <span class="n">info</span> <span class="k">=</span> <span class="nc">PartitionOffsetRequestInfo</span><span class="o">(</span><span class="n">whichTime</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">infoMap</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="n">part</span> <span class="o">-&gt;</span> <span class="n">info</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">request</span> <span class="k">=</span> <span class="nc">OffsetRequest</span><span class="o">(</span><span class="n">info</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">response</span> <span class="k">=</span> <span class="n">consumer</span><span class="o">.</span><span class="n">getOffsetsBefore</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at <code>PartitionOffsetRequestInfo</code>, it supplies a query criterion for the corresponding partition. <code>time</code> can be a unix timestamp or either one of the two special constants:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">PartitionOffsetRequestInfo</span><span class="o">(</span><span class="n">time</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">maxNumOffsets</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">kafka</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="nc">OffsetRequest</span><span class="o">.</span><span class="nc">EarliestTime</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">val</span> <span class="n">kafka</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="nc">OffsetRequest</span><span class="o">.</span><span class="nc">LatestTime</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does setting <code>maxNumOffset</code> to anything larger than 1 give us more message offsets before the given time? To answer the question we can dive into Kafka&rsquo;s source code. Before that, let us see how Kafka stores messages for a partition.</p>

<p>Generally speaking, we have a big write-ahead log to store messages for each partition. In reality, the big log is divided into several log segments and stored in different files. The default value of a segment is 1 GB but it can be configured:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// server.properties</span>
</span><span class='line'><span class="k">#</span> <span class="nc">The</span> <span class="n">maximum</span> <span class="n">size</span> <span class="n">of</span> <span class="n">a</span> <span class="n">log</span> <span class="n">segment</span> <span class="n">file</span><span class="o">.</span> <span class="nc">When</span> <span class="k">this</span> <span class="n">size</span> <span class="n">is</span> <span class="n">reached</span> <span class="n">a</span> <span class="k">new</span> <span class="n">log</span> <span class="n">segment</span> <span class="n">will</span> <span class="n">be</span> <span class="n">created</span><span class="o">.</span>
</span><span class='line'><span class="k">#</span><span class="n">log</span><span class="o">.</span><span class="n">segment</span><span class="o">.</span><span class="n">bytes</span><span class="k">=</span><span class="mi">1073741824</span> <span class="k">#</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span> <span class="k">=</span> <span class="mi">1073741824</span> <span class="k">=</span> <span class="mi">1</span><span class="n">G</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="n">segment</span><span class="o">.</span><span class="n">bytes</span><span class="k">=</span><span class="mi">65536</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I change it to 64 KB for testing. <strong>WARNING:</strong> change in segment size might result in the loss of data.</p>

<p><img src="http://cfchou.github.io/images/post/logsegments.png" alt="log files on my machine" /></p>

<h3>fetchOffsetsBefore</h3>

<p>Now we move on to see how offset requests are processed. Eventually, a request is dealt by <code>fetchOffsetBefore</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// scala/kafka/server/KafkaApis.scala</span>
</span><span class='line'><span class="k">def</span> <span class="n">fetchOffsetsBefore</span><span class="o">(</span><span class="n">log</span><span class="k">:</span> <span class="kt">Log</span><span class="o">,</span> <span class="n">timestamp</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">maxNumOffsets</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">segsArray</span> <span class="k">=</span> <span class="n">log</span><span class="o">.</span><span class="n">logSegments</span><span class="o">.</span><span class="n">toArray</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">offsetTimeArray</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[(</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">)]</span> <span class="k">=</span> <span class="kc">null</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">segsArray</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="n">offsetTimeArray</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[(</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">)](</span><span class="n">segsArray</span><span class="o">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">offsetTimeArray</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[(</span><span class="kt">Long</span>, <span class="kt">Long</span><span class="o">)](</span><span class="n">segsArray</span><span class="o">.</span><span class="n">length</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">segsArray</span><span class="o">.</span><span class="n">length</span><span class="o">)</span>
</span><span class='line'>      <span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">segsArray</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="n">baseOffset</span><span class="o">,</span> <span class="n">segsArray</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="n">lastModified</span><span class="o">)</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">segsArray</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">segsArray</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="n">logEndOffset</span><span class="o">,</span> <span class="nc">SystemTime</span><span class="o">.</span><span class="n">milliseconds</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="n">startIndex</span> <span class="k">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">timestamp</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">OffsetRequest</span><span class="o">.</span><span class="nc">LatestTime</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">startIndex</span> <span class="k">=</span> <span class="n">offsetTimeArray</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">OffsetRequest</span><span class="o">.</span><span class="nc">EarliestTime</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">startIndex</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">isFound</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>        <span class="n">debug</span><span class="o">(</span><span class="s">&quot;Offset time array = &quot;</span> <span class="o">+</span> <span class="n">offsetTimeArray</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">o</span> <span class="k">=&gt;</span> <span class="s">&quot;%d, %d&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">o</span><span class="o">.</span><span class="n">_2</span><span class="o">)))</span>
</span><span class='line'>        <span class="n">startIndex</span> <span class="k">=</span> <span class="n">offsetTimeArray</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isFound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">startIndex</span><span class="o">).</span><span class="n">_2</span> <span class="o">&lt;=</span> <span class="n">timestamp</span><span class="o">)</span>
</span><span class='line'>            <span class="n">isFound</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">startIndex</span> <span class="o">-=</span><span class="mi">1</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">retSize</span> <span class="k">=</span> <span class="n">maxNumOffsets</span><span class="o">.</span><span class="n">min</span><span class="o">(</span><span class="n">startIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="n">retSize</span><span class="o">)</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">retSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ret</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">startIndex</span><span class="o">).</span><span class="n">_1</span>
</span><span class='line'>      <span class="n">startIndex</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// ensure that the returned seq is in descending order of offsets</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">.</span><span class="n">toSeq</span><span class="o">.</span><span class="n">sortBy</span><span class="o">(-</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this function, <code>segsArray: Array[LogSegment]</code> refers to all log segments for this partition. Whenever the log grows over the configured size, the number of log segments/files increases by 1, so does <code>segsArray</code>.</p>

<p><code>segsArray</code> first gets mapped to <code>offsetTimeArray: Array[(Long, Long)]</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">segsArray</span><span class="o">.</span><span class="n">length</span><span class="o">)</span>
</span><span class='line'>  <span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">segsArray</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="n">baseOffset</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">segsArray</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="n">lastModified</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>baseOffset</code> is the offset of the first message(in the previous segment) in this segemnt <code>i</code>.
<code>lastModified</code> is the timestamp of the latest message in this segment <code>i</code>.jHere is an example:</p>

<p><img src="http://cfchou.github.io/images/post/offsetrequest1.png" alt="map log segements to offsetTimeArray" /></p>

<p>In the picture, we see the first segment reaches the configured size and new messages are appended to the second segment.</p>

<ul>
<li>Tuple <code>offsetTimeArray(0)</code> contains the <strong>offset to the first message</strong> in the first segement and the <strong>timestamp of the last</strong> message in the the first segment.</li>
<li>Tuple <code>offsetTimeArray(1)</code> contains the <strong>offset to the first message</strong> in the second segement and the <strong>timestamp of the latest</strong> message in the the second segment.</li>
</ul>


<p>Then, a padding element is added to <code>offsetTimeArray</code>, which contains the <strong>offset to the latest message</strong> and <strong>the current time</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">segsArray</span><span class="o">.</span><span class="n">length</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="n">logEndOffset</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nc">SystemTime</span><span class="o">.</span><span class="n">milliseconds</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cfchou.github.io/images/post/offsetrequest2.png" alt="map log segements to offsetTimeArray" /></p>

<p>Next, it tries to find the <code>startIndex</code> of <code>offsetTimeArray</code>.</p>

<ol>
<li>If <code>timestamp == LatestTime</code>, we gets the last index(of the padding element).</li>
<li>If <code>timestamp == EarliestTime</code>, we get 0.</li>
<li>Otherwise, search backward to find the first element whose latest message happened <strong>before</strong> <code>timestamp</code>.</li>
</ol>


<p>The offset of the first message in the selected log segment will be returned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">timestamp</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">OffsetRequest</span><span class="o">.</span><span class="nc">LatestTime</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">startIndex</span> <span class="k">=</span> <span class="n">offsetTimeArray</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">OffsetRequest</span><span class="o">.</span><span class="nc">EarliestTime</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">startIndex</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">isFound</span> <span class="k">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="n">debug</span><span class="o">(</span><span class="s">&quot;Offset time array = &quot;</span> <span class="o">+</span> <span class="n">offsetTimeArray</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">o</span> <span class="k">=&gt;</span> <span class="s">&quot;%d, %d&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span> <span class="n">o</span><span class="o">.</span><span class="n">_2</span><span class="o">)))</span>
</span><span class='line'>    <span class="n">startIndex</span> <span class="k">=</span> <span class="n">offsetTimeArray</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isFound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">startIndex</span><span class="o">).</span><span class="n">_2</span> <span class="o">&lt;=</span> <span class="n">timestamp</span><span class="o">)</span>
</span><span class='line'>        <span class="n">isFound</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">startIndex</span> <span class="o">-=</span><span class="mi">1</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cfchou.github.io/images/post/offsetrequest3.png" alt="map log segements to offsetTimeArray" /></p>

<p>From the figure, assume <code>maxNumOffsets == 1</code>,</p>

<ol>
<li><p>If <code>timestamp == LatestTime</code>, we get <code>startIndex == 2</code> pointing to <code>(8, now)</code> then return <code>[8]</code>, which is the offset to the latest message in the partition.</p></li>
<li><p>If <code>timestamp == EarliestTime</code>, we get <code>startIndex == 0</code> pointing to <code>(0, t1)</code> then return <code>[0]</code> which is the offset to the first messsage in the partition.</p></li>
<li><p>If <code>timestamp == T1</code>, we get <code>startIndex == 0</code> pointing to <code>(0, t1)</code> then return <code>[0]</code>. Note that <code>(7, t2)</code> is skipped because <code>T1 &lt; t2</code>.</p></li>
<li><p>If <code>timestamp == T2</code>, we get <code>startIndex == 1</code> pointing to <code>(7, t2)</code> then return <code>[7]</code>.</p></li>
</ol>


<p>Finally, we are going to see what <code>maxNumOffsets</code> is for. If we&rsquo;re interrested more than one element(log segment), we get a chance to ask more offsets to the first messages in previous segments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">retSize</span> <span class="k">=</span> <span class="n">maxNumOffsets</span><span class="o">.</span><span class="n">min</span><span class="o">(</span><span class="n">startIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">ret</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Long</span><span class="o">](</span><span class="n">retSize</span><span class="o">)</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">j</span> <span class="k">&lt;-</span> <span class="mi">0</span> <span class="n">until</span> <span class="n">retSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ret</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="k">=</span> <span class="n">offsetTimeArray</span><span class="o">(</span><span class="n">startIndex</span><span class="o">).</span><span class="n">_1</span>
</span><span class='line'>  <span class="n">startIndex</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Say if <code>maxNumOffsets == 2</code>, with the calculated <code>startIndex</code> above, then:</p>

<ol>
<li><p>If <code>timestamp == LatestTime</code>, we get <code>(8, now), (7, t2)</code> then return <code>[8, 7]</code>.</p></li>
<li><p>If <code>timestamp == EarliestTime</code>, we only get <code>(0, t1)</code> then return <code>[0]</code>.</p></li>
<li><p>If <code>timestamp == T1</code>, we only get <code>(0, t1)</code> then return <code>[0]</code>.</p></li>
<li><p>If <code>timestamp == T2</code>, we get <code>(7, t2), (0, t1)</code> then return <code>[7, 0]</code>.</p></li>
</ol>


<p>That&rsquo;s it. To conclude, <strong>the offsets we get, will be either the offsets to the first messages in log segments or the offset to the latest message on the partition</strong>.</p>

<p>This also explains a common problem: people often see offset 0 when they supply a unix <code>timestamp</code> to query offsets. That&rsquo;s simply because <code>log.sement.bytes</code> is 1 GB per default, the number of segments probably has&rsquo;t grown to more than 1 for the time being so they get the offset to the first messsage of the first segment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern Matching for Type Erasure]]></title>
    <link href="http://cfchou.github.io/blog/2015/02/24/pattern-matching-for-type-erasure/"/>
    <updated>2015-02-24T12:55:39+08:00</updated>
    <id>http://cfchou.github.io/blog/2015/02/24/pattern-matching-for-type-erasure</id>
    <content type="html"><![CDATA[<h3>Producer as an Actor</h3>

<p>In one of my toy projects, I use an <strong>Akka</strong> <code>Actor</code> to encapsulate a <strong>Kafka</strong> <code>Producer</code>. The benefit is twofold. First, it&rsquo;s recommanded that <a href="http://kafka.apache.org/082/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html">a producer should be shared among all threads for best performance</a>. Maintaining a seemingly long-lived actor/producer can be easily achieved thanks to <strong>Akka</strong>&rsquo;s <code>SupervisorStrategy</code>. Second, resources can be well managed by the hooks inserted in the life-cycle of the actor. However, indirectly asking producer to send messages of a parameterized type would sacrifice type safety due to <strong>type erasure</strong> as described bellow.</p>

<!-- more -->


<h3>Problems caused by Type Erasure</h3>

<p><strong>Type erasure</strong> removes some type information of parameterized types. It is used to fill the gap between java generics and the legacy code written prior generics. Scala, while is subject to the fact that it is implemented in java, introduces a few mechanisms to get around type erasure.</p>

<p>To see one of the limitations caused by <strong>type erasure</strong>, let&rsquo;s look at this piece of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">KeyedMesssage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">TestApp</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">actor</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]</span>
</span><span class='line'>  <span class="n">actor</span> <span class="o">!</span> <span class="k">new</span> <span class="nc">KeyedMessage</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">](</span><span class="mi">1</span><span class="o">,</span> <span class="s">&quot;legal&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">actor</span> <span class="o">!</span> <span class="k">new</span> <span class="nc">KeyedMessage</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">String</span><span class="o">](</span><span class="s">&quot;illegal&quot;</span><span class="o">,</span> <span class="s">&quot;but compiled!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler don&rsquo;t complain about the illegal message, since <strong>Actor</strong>&rsquo;s bang <code>!</code> function accepts the type of <code>Any</code>. But can we rely on pattern matching in <code>receive</code> to spot misuse and safely discard them during run-time? Unfortunately, we can&rsquo;t, at least not in this way.</p>

<p>At the end of the day, JVM only knows <code>ProducerActor[_, _]</code> <code>KeyedMessage[_, _]</code> at run-time. Type information of the type parameters are not carried over from compile-time. Matching whatever instantiation of <code>KeyedMessage[X, Y]</code> to <code>KeyedMessage[_, _]</code> is unduly legal(though an unchecked warning should be issued, more on that later). In <code>TestApp</code>, the illegal <code>KeyedMessage[String, String]</code> will match the first clause. A run-time exception will be thrown because <code>producer.send</code> is expecting <code>KeyedMessage[Int, String]</code>.</p>

<h3>Reification using TypeTag[T]</h3>

<p>The solution, as <a href="https://groups.google.com/forum/#!topic/akka-user/7gd2Tfwax5Q">suggested by Roland Kuhn</a>, is to use <code>TypeTag[T]</code>. Basically, to make JVM aware of what <code>K, V</code> really are, a technique called <strong>type reification</strong> is needed. It&rsquo;s a behaviour that enough information is retained so that JVM knows what type parameters are during run-time. Scala&rsquo;s <code>TypeTag[T]</code> provides such functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">](</span><span class="k">implicit</span> <span class="n">tk</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">K</span><span class="o">],</span> <span class="n">tv</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">V</span><span class="o">])</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Msg</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">tk</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&lt;:&lt;</span> <span class="n">tk</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">.</span><span class="n">tv</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&lt;:&lt;</span> <span class="n">tv</span><span class="o">.</span><span class="n">tpe</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Msg</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">](</span><span class="k">override</span> <span class="k">val</span> <span class="n">key</span><span class="k">:</span> <span class="kt">K</span><span class="o">,</span> <span class="k">override</span> <span class="k">val</span> <span class="n">value</span><span class="k">:</span> <span class="kt">V</span><span class="o">)</span>
</span><span class='line'>  <span class="o">(</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">tk</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">K</span><span class="o">],</span> <span class="k">val</span> <span class="n">tv</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">V</span><span class="o">])</span>
</span><span class='line'>  <span class="k">extends</span> <span class="nc">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">](</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TypeTag[T]::tpe</code> is reflective representation of type T. An instance of <code>A &lt;:&lt; B</code> witnesses that <strong>A is a subtype of B</strong>.</p>

<p><strong>Context bound</strong> can be used to reduce a little bit of clumsiness of the <code>ProducerActor</code> interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K:TypeTag</span>, <span class="kt">V:TypeTag</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">m</span><span class="k">:</span> <span class="kt">Msg</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">tk</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&lt;:&lt;</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">TypeTag</span><span class="o">[</span><span class="kt">K</span><span class="o">]].</span><span class="n">tpe</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">.</span><span class="n">tv</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&lt;:&lt;</span> <span class="n">implicitly</span><span class="o">[</span><span class="kt">TypeTag</span><span class="o">[</span><span class="kt">V</span><span class="o">]].</span><span class="n">tpe</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Props Factory Pattern</h3>

<p>If we try to create a <code>ProducerActor</code> in this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">actor</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">ProducerActor</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">]]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll get during run-time an <strong>IllegalArgumentException</strong>:</p>

<blockquote><p>java.lang.IllegalArgumentException: no matching constructor found on class ProducerActor for arguments []</p></blockquote>

<p>The reason causing this problem is subtle. I guess that&rsquo;s because the needed <strong>implicits TypeTag[K] and TypeTag[V]</strong> are not there by the time the Props is used for creating actors.</p>

<p>We can define a <strong><a href="http://doc.akka.io/docs/akka/2.3.9/scala/actors.html#Recommended_Practices">Props factory</a></strong> to avoid this problem(the major benefit of using a <strong>Props factory</strong> is described in the document and is beyond the scope of this post):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">ProducerActor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">props</span><span class="o">[</span><span class="kt">K:TypeTag</span>, <span class="kt">V:TypeTag</span><span class="o">]</span><span class="k">:</span> <span class="kt">Props</span> <span class="o">=</span> <span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="k">val</span> <span class="n">actor</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">ProducerActor</span><span class="o">.</span><span class="n">props</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">String</span><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>By doing so, we&rsquo;re assured that the compiler would generate the needed implicits for <code>Props</code> object right at the line of <code>actorOf</code>.</p>

<h3>Reify List[KeyedMessage[K, V]]</h3>

<p>Notice that <strong>Kafka</strong> <code>Producer</code>&rsquo;s <code>send</code> actually accepts <strong>vararg</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">send</span><span class="o">(</span><span class="n">messages</span><span class="k">:</span> <span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]*)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sending one message is just sending a one-element list of messages. <code>receive</code> therefore only needs to handle the generalized case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">ms</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">KeyedMesssage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]]</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">ms</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Likewise, JVM wouldn&rsquo;t know anything about the type parameters due to <strong>type erasure</strong>. The pattern is <code>List[_]</code> at run-time. Consequently, any <code>List[T]</code> would match. Unsurprisingly, we can enforce type safety by <code>TypeTag[T]</code>. Before we proceed, there are a few points worth noting.</p>

<ol>
<li><p>This piece of code would compile with a warning saying <strong>&ldquo;non-variable type argument KeyedMessage[K, V] in type pattern List[KeyedMessage[K, V]] is unchecked since it is eliminated by erasure&rdquo;</strong>. Such warning rises because according to <a href="http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ001">Java Generics FAQ</a>, <strong>&ldquo;unchecked&rdquo; warnings are reported when the compiler finds a cast whose target type is either a parameterized type or a type parameter.</strong> However, why didn&rsquo;t we see any warning previously when we delt with <code>case m: KeyedMessage[K, V]</code>? Well, it is probably a bug and is addressed by <a href="https://issues.scala-lang.org/browse/SI-9188">SI-9188</a>.</p></li>
<li><p>We wouldn&rsquo;t discuss it at length but actually <a href="http://docs.scala-lang.org/overviews/reflection/typetags-manifests.html">there are different types of TypeTag</a>. <code>TypeTag[T]</code> is deliberately chosen since it is the strongest in the sense that it would retained type information for all nested type parameters.</p></li>
</ol>


<p>By and large, the solution is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">ListMsg</span><span class="o">[</span><span class="kt">U</span><span class="o">](</span><span class="n">ms</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">U</span><span class="o">],</span> <span class="n">tag</span><span class="k">:</span> <span class="kt">TypeTag</span><span class="o">[</span><span class="kt">U</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ProducerActor</span><span class="o">[</span><span class="kt">K:TypeTag</span>, <span class="kt">V:TypeTag</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">producer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Producer</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">ListMsg</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">tag</span><span class="o">)</span> <span class="k">if</span> <span class="n">tag</span><span class="o">.</span><span class="n">tpe</span> <span class="o">&lt;:&lt;</span> <span class="n">typeOf</span><span class="o">[</span><span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]]</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">tmp</span> <span class="k">=</span> <span class="n">ms</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">KeyedMessage</span><span class="o">[</span><span class="kt">K</span>, <span class="kt">V</span><span class="o">]]]</span>
</span><span class='line'>      <span class="n">producer</span><span class="o">.</span><span class="n">send</span><span class="o">(</span><span class="n">tmp</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="o">(</span><span class="s">&quot;Unknown is discarded&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we have to cast to <code>List[KeyedMessage[K, V]]</code> to pass the static type check depite the fact that during run-time, JVM actually sees <code>ms.asInstanceOf[List[_]]</code>. Nevertheless, by filtering out unwanted types in the case clause, the cast would always happily succeed.</p>

<p>That&rsquo;s pretty much it. We have seen how <strong>type erasure</strong> steps in the way when pattern matching generic types. A solution of using <code>TypeTag[T]</code> is demonstrated. This technique of course can be used elsewhere to improve type safety.</p>

<p>-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Translate and override val/var/def]]></title>
    <link href="http://cfchou.github.io/blog/2015/02/17/translate-and-override-val-slash-var-slash-def/"/>
    <updated>2015-02-17T16:24:40+08:00</updated>
    <id>http://cfchou.github.io/blog/2015/02/17/translate-and-override-val-slash-var-slash-def</id>
    <content type="html"><![CDATA[<p><strong>Val/var/def</strong> are Scala&rsquo;s language constructs that manifest immutibility amongst other features. Looking behind how <strong>scalac</strong> translates them helps us to understand more about related semantics like instance initialization, override, etc..</p>

<p>-</p>

<h3>Translate val/var/def to java</h3>

<p>There are a few simple rules to translate val/var/def from scala to java.</p>

<p>For traits</p>

<ul>
<li>private variables are replaced by ones with names &ldquo;mangled&rdquo;; protected varibles are spared</li>
<li>getters and setters are generated</li>
<li>&ldquo;initializers&rdquo; are generated</li>
</ul>


<p>For classes</p>

<ul>
<li>getters and setters are generated</li>
</ul>


<p>Note that terms like &ldquo;translate&rdquo;, &ldquo;mangle&rdquo; and &ldquo;initializer&rdquo; are used here for the ease of understanding. I don&rsquo;t think they are common jargon in Scala community.</p>

<p>Now let&rsquo;s look at an example:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// scala</span>
</span><span class='line'><span class="k">trait</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">b</span>  <span class="k">=</span> <span class="mi">20</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">c</span> <span class="k">=</span> <span class="mi">30</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">var</span> <span class="n">d</span> <span class="k">=</span> <span class="mi">40</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">e</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An interface and an abstract class is generated for trait A</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// java</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// val a</span>
</span><span class='line'>  <span class="c1">// an initializer in the form of A$_setter$&lt;name&gt;_$eq</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">A$_setter_$a_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">paramInt</span><span class="o">);</span>  <span class="c1">// initializer for val</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">a</span><span class="o">();</span>  <span class="c1">// getter</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// private val b</span>
</span><span class='line'>  <span class="c1">// a mangled name A$$b is generated to replace &#39;b&#39;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">A$_setter_$A$$b_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">paramInt</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">A$$b</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// var c</span>
</span><span class='line'>  <span class="c1">// no need for an initaliser for var</span>
</span><span class='line'>  <span class="c1">// instead, var needs a setter</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">c</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">c_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">paramInt</span><span class="o">);</span>  <span class="c1">// setter</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// private var d</span>
</span><span class='line'>  <span class="c1">// mangled name A$$d for getter/setter</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">A$$d</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">A$$d_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">paramInt</span><span class="o">);</span>  <span class="c1">// setter</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// def e</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">e</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">A$class</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// we&#39;ll see how static $init$ will be used in concrete class&#39;s constructor</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">$init$</span><span class="o">(</span><span class="n">A</span> <span class="n">$this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">$this</span><span class="o">.</span><span class="na">A$_setter_$a_$eq</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>    <span class="n">$this</span><span class="o">.</span><span class="na">A$_setter_$A$$b_$eq</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'>    <span class="n">$this</span><span class="o">.</span><span class="na">c_$eq</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
</span><span class='line'>    <span class="n">$this</span><span class="o">.</span><span class="na">A$$d_$eq</span><span class="o">(</span><span class="mi">40</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can not &ldquo;new A&rdquo; as a trait is like an interface. A concrete class extends A must be there to instantiate instances. Say we have a concrete class A1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">A1</span> <span class="k">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">e</span> <span class="k">=</span> <span class="mi">50</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="mi">60</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s then transformed to java code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A1</span> <span class="kd">implements</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// all fields in A, mangled or not</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">A$$b</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">A$$d</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// all implementations of getters/setters/initializers</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">a</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">A$_setter_$a_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">x$1</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">x$1</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">A$$b</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">A$$b</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">A$_setter_$A$$b_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">x$1</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">A$$b</span> <span class="o">=</span> <span class="n">x$1</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">c</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">c</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">c_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">x$1</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">x$1</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">A$$d</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">A$$d</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">A$$d_$eq</span><span class="o">(</span><span class="kt">int</span> <span class="n">x$1</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">A$$d</span> <span class="o">=</span> <span class="n">x$1</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">e</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">50</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// A1&#39;s newly added members, and their getters/setters.</span>
</span><span class='line'>  <span class="c1">// No mangled names</span>
</span><span class='line'>  <span class="c1">// No initializers</span>
</span><span class='line'>  <span class="c1">// access qualifier is private if it&#39;s defined so</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">f</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">f</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">A1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// static method &quot;initialize&quot; trait A&#39;s members</span>
</span><span class='line'>    <span class="n">A</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">$init$</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// initialization of A1&#39;s added members</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">f</span> <span class="o">=</span> <span class="mi">60</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If <strong>val/var</strong> are newly declared in a class rather than a trait, the corresponding getters and setters. Nevertheless, no name mangling and no initializers.</p>

<p>-</p>

<hr />

<h3>Override between val/var/def</h3>

<p>The other aspect of this topic is override rules. The rationale behind the rules normally can be obtained from applying <strong>Substitution Principle</strong>. It&rsquo;s the error messages that sometimes may cause confusion. We&rsquo;ll reason about the legality by <strong>Substitution Principle</strong> or by looking at the translated java code.</p>

<p>-</p>

<h4>var/def can&rsquo;t override val</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">A1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="mi">11</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A2</span> <span class="k">extends</span> <span class="n">A1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">var</span> <span class="n">a</span> <span class="k">=</span> <span class="mi">12</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">error</span><span class="k">:</span> <span class="kt">variable</span> <span class="kt">a</span> <span class="kt">needs</span> <span class="kt">to</span> <span class="kt">be</span> <span class="kt">a</span> <span class="kt">stable</span><span class="o">,</span> <span class="n">immutable</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s because clients of A1 would always expect <code>a</code> to be immutable. That&rsquo;s the value would always be the same for every reads. Nevertheless, A2 would break the contract.</p>

<p>-</p>

<h4>val/def can&rsquo;t override var</h4>

<p>Firstly, <strong>val</strong> can&rsquo;t override <strong>var</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">A1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">b</span> <span class="k">=</span> <span class="mi">21</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">inc_b</span> <span class="k">=</span> <span class="o">{</span> <span class="n">b</span> <span class="o">+=</span> <span class="mi">1</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A2</span> <span class="k">extends</span> <span class="n">A1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="mi">22</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">error</span><span class="k">:</span> <span class="kt">value</span> <span class="kt">b</span> <span class="kt">cannot</span> <span class="kt">override</span> <span class="kt">a</span> <span class="kt">mutable</span> <span class="kt">variable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clients of A1 would always expect &lsquo;a&rsquo; to be mutable and it&rsquo;s always legal to modify it.</p>

<p>Next, the reason why <strong>def</strong> can&rsquo;t override <em>var</em> is similar. Plus, the clients of A2 can&rsquo;t both read and write to <strong>def</strong> as it can to <strong>var</strong>. Under the hood, <strong>def</strong> is only one method, whilst <strong>var</strong> gets translated to a getter and a setter.</p>

<p>-</p>

<h4>val can override def with no parameters</h4>

<p>Think everyone&rsquo;s agreed.</p>

<p>-</p>

<h4>var can&rsquo;t override def</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">A1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">e</span> <span class="k">=</span> <span class="mi">50</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A2</span> <span class="k">extends</span> <span class="n">A1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">var</span> <span class="n">e</span> <span class="k">=</span> <span class="mi">51</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">error</span><span class="k">:</span> <span class="kt">method</span> <span class="kt">e_=</span> <span class="kt">overrides</span> <span class="kt">nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recall that a pair of getter/setter are generated for <strong>var</strong>, <code>e()</code> and  <code>e_$eq(Int)</code>, respectively. The later doesn&rsquo;t override anything hence the error.</p>

<p>While <strong>var</strong> can&rsquo;t override <strong>def</strong>, it&rsquo;s alright that <strong>var</strong> <em>implements</em> <strong>abstract def</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">e</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">C1</span> <span class="k">extends</span> <span class="n">C</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">e</span> <span class="k">=</span> <span class="mi">51</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>-</p>

<hr />

<h3>val/var/def with different access modifiers</h3>

<p>We haven&rsquo;t disscussed about <strong>val/var/def</strong> with other access modifiers like protect, package private, etc.. However, one can decompile the translated java by using tools like javap or <a href="http://jd.benow.ca/">JD-GUI</a> and examine the result himself.</p>

<p>-</p>

<hr />
]]></content>
  </entry>
  
</feed>
